#Использовать logos
#Использовать delegate

Перем Лог;

Перем Коллекция;
Перем КэшКолонок;

Процедура УстановитьКоллекцию(НоваяКоллекция, ОбновлятьКэшКолонок = Истина) Экспорт
	
	Коллекция = Новый Массив;
	
	Для Каждого ЭлементНовойКоллекции Из НоваяКоллекция Цикл
		Коллекция.Добавить(ЭлементНовойКоллекции);
	КонецЦикла;

	Если НЕ ОбновлятьКэшКолонок Тогда
		Возврат;
	КонецЕсли;
	
	КэшКолонок = Новый Массив;

	ЕстьТаблицаСвойств = Ложь;
	Рефлектор = Новый Рефлектор;
	Попытка
		ТаблицаСвойств = Рефлектор.ПолучитьТаблицуСвойств(НоваяКоллекция);		
		Для Каждого Свойство Из ТаблицаСвойств Цикл
			Лог.Отладка("Обнаружено свойство коллекции %1", Свойство.Имя);
		КонецЦикла;
		ЕстьТаблицаСвойств = Истина;
	Исключение
	КонецПопытки;

	ДобавлятьКолонкиВКеш = Ложь;
	Если ЕстьТаблицаСвойств И ТаблицаСвойств.Найти("Колонки", "Имя") <> Неопределено Тогда
		ДобавлятьКолонкиВКеш = Истина;
	ИначеЕсли Не ЕстьТаблицаСвойств И ТипЗнч("НоваяКоллекция") = Тип("ТаблицаЗначений") Тогда
		ДобавлятьКолонкиВКеш = Истина;
	КонецЕсли;

	Если ДобавлятьКолонкиВКеш Тогда
		Для Каждого Колонка Из НоваяКоллекция.Колонки Цикл
			КэшКолонок.Добавить(Колонка);
		КонецЦикла;
	КонецЕсли;

	Лог.Отладка("Кэш колонок содержит %1 колонок", КэшКолонок.Количество());

КонецПроцедуры

Функция ПолучитьКоллекцию() Экспорт
	Возврат Коллекция;
КонецФункции

Функция ПолучитьКэшКолонок() Экспорт
	Возврат КэшКолонок;
КонецФункции

Функция ВыполнитьПервые(ДополнительныеПараметры) Экспорт
	
	Количество = ДополнительныеПараметры.Количество;
	
	Лог.Отладка("ВыполнитьПервые %1", Количество);
	
	Результат = Новый Массив;
	Для сч = 0 По Количество - 1 Цикл
		Элемент = Коллекция[сч];
		Результат.Добавить(Элемент);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ВыполнитьПропустить(ДополнительныеПараметры) Экспорт
	
	Количество = ДополнительныеПараметры.Количество;
	
	Лог.Отладка("ВыполнитьПропустить %1", Количество);
	
	Результат = Новый Массив;
	Для сч = Количество По Коллекция.ВГраница() Цикл
		Элемент = Коллекция[сч];
		Результат.Добавить(Элемент);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ВыполнитьРазличные(ДополнительныеПараметры) Экспорт
	
	Лог.Отладка("ВыполнитьРазличные");
	
	Результат = Новый Массив;
	
	ОбработчикСравнения = ДополнительныеПараметры.Обработчик;
	
	Для Каждого Элемент Из Коллекция Цикл
		
		КоличествоСовпадений = 0;
		
		Для Каждого ЭлементРезультат Из Результат Цикл
			ОбработчикСравнения.Параметры().Элемент1 = Элемент;
			ОбработчикСравнения.Параметры().Элемент2 = ЭлементРезультат;
			РезультатСортировки = Неопределено;
			РезультатСортировки = Делегаты.Исполнить(ОбработчикСравнения);
			Если РезультатСортировки = 0 Тогда
				КоличествоСовпадений = КоличествоСовпадений + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоСовпадений = 0 Тогда 
			Результат.Добавить(Элемент);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ВыполнитьФильтровать(ДополнительныеПараметры) Экспорт
	
	Обработчик = ДополнительныеПараметры.Обработчик;
	
	Лог.Отладка("ВыполнитьФильтровать %1", Обработчик.ИмяМетода());
	
	Результат = Новый Массив;
	
	// Если Обработчик.ДополнительныеПараметры = Неопределено Тогда
	// 	Обработчик.ДополнительныеПараметры = Новый Структура;
	// КонецЕсли;
	// Обработчик.ДополнительныеПараметры.Вставить("Элемент");
	НовыеДополнительныеПараметры = Новый Структура;
	НовыеДополнительныеПараметры.Вставить("Элемент");
	НовыеДополнительныеПараметры.Вставить("Результат");
	Обработчик.УстановитьПараметры(НовыеДополнительныеПараметры);
	
	Для Каждого Элемент Из Коллекция Цикл
		НовыеДополнительныеПараметры.Элемент = Элемент;
		// Обработчик.ДополнительныеПараметры.Элемент = Элемент;
		РезультатФильтрации = Ложь;
		РезультатФильтрации = Делегаты.Исполнить(Обработчик);
		// Делегаты.Исполнить(Обработчик);
		// РезультатФильтрации = НовыеДополнительныеПараметры.Результат;
		
		Если РезультатФильтрации Тогда
			Результат.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ВыполнитьОбработать(ДополнительныеПараметры) Экспорт
	
	Обработчик = ДополнительныеПараметры.Обработчик;
	
	Лог.Отладка("ВыполнитьОбработать %1", Обработчик.ИмяМетода());
	
	Результат = Новый Массив;
	
	// Если Обработчик.ДополнительныеПараметры = Неопределено Тогда
	// 	Обработчик.ДополнительныеПараметры = Новый Структура;
	// КонецЕсли;
	// Обработчик.ДополнительныеПараметры.Вставить("Элемент");
	НовыеДополнительныеПараметры = Новый Структура;
	НовыеДополнительныеПараметры.Вставить("Элемент");
	Обработчик.УстановитьПараметры(НовыеДополнительныеПараметры);
	
	Для Каждого Элемент Из Коллекция Цикл
		НовыеДополнительныеПараметры.Элемент = Элемент;
		РезультатОбработки = Элемент;
		РезультатФильтрации = Делегаты.Исполнить(Обработчик);
		
		Результат.Добавить(РезультатОбработки);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ВыполнитьСортировать(ДополнительныеПараметры) Экспорт
	
	Обработчик = ДополнительныеПараметры.Обработчик;
	
	Лог.Отладка("ВыполнитьСортировать %1", Обработчик.ИмяМетода());
	
	Результат = Коллекция;
	
	// Если Обработчик.ДополнительныеПараметры = Неопределено Тогда
	// 	Обработчик.ДополнительныеПараметры = Новый Структура;
	// КонецЕсли;
	// Обработчик.ДополнительныеПараметры.Вставить("Элемент1");
	// Обработчик.ДополнительныеПараметры.Вставить("Элемент2");
	НовыеДополнительныеПараметры = Новый Структура;
	НовыеДополнительныеПараметры.Вставить("Элемент1");
	НовыеДополнительныеПараметры.Вставить("Элемент2");
	Обработчик.УстановитьПараметры(НовыеДополнительныеПараметры);
	
	Для й = 0 По Результат.Количество() - 1 Цикл
		Флаг = Ложь;
		к = Результат.Количество() - 1;
		Пока к > й Цикл
			Элемент = Результат[к - 1];
			СледующийЭлемент = Результат[к];
			НовыеДополнительныеПараметры.Элемент1 = Элемент;
			НовыеДополнительныеПараметры.Элемент2 = СледующийЭлемент;
			РезультатСортировки = Неопределено;
			РезультатСортировки = Делегаты.Исполнить(Обработчик);
			Если РезультатСортировки > 0 Тогда
				Результат[к - 1] = СледующийЭлемент;
				Результат[к] = Элемент;
				Флаг = Истина;
			КонецЕсли;
			к = к - 1;
		КонецЦикла;
		Если НЕ Флаг Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Процедура Инициализация()
	Лог = Логирование.ПолучитьЛог("oscript.lib.stream");
КонецПроцедуры

Инициализация();