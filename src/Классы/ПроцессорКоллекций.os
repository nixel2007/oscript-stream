#Использовать delegate
#Использовать logos
#Использовать tempfiles

Перем Лог;

Перем Конвейер;
Перем ПроцессорКоллекцийСлужебный;
Перем ЛокальныйМенеджерВременныхФайлов;
Перем ВременныеОписанияОповещений;

// Общее API

Процедура УстановитьКоллекцию(НоваяКоллекция) Экспорт
	ПроцессорКоллекцийСлужебный.УстановитьКоллекцию(НоваяКоллекция);
	Лог.Отладка("Установлена коллекция размером %1", ПроцессорКоллекцийСлужебный.ПолучитьКоллекцию().Количество());
КонецПроцедуры

// Конвейерные методы

Функция Первые(Количество) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Количество", Количество);
	
	ПоложитьЯчейкуВКонвейер("Первые", , ДополнительныеПараметры);
	Возврат ЭтотОбъект;

КонецФункции

Функция Пропустить(Количество) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Количество", Количество);
	
	ПоложитьЯчейкуВКонвейер("Пропустить", , ДополнительныеПараметры);
	Возврат ЭтотОбъект;

КонецФункции

Функция Различные(Знач ОбработчикСравнения = Неопределено, Знач ДополнительныеПараметры = Неопределено) Экспорт

	Если ОбработчикСравнения = Неопределено Тогда
		ОбработчикСравнения = ПроцессорыКоллекций.СтандартныйОбработчикСравнения();
	Иначе
		Если ТипЗнч(ОбработчикСравнения) = Тип("Строка") Тогда
			ОбработчикСравнения = СформироватьВременноеОписаниеОповещения(ОбработчикСравнения, ДополнительныеПараметры);
		КонецЕсли;	
	КонецЕсли;

	ПоложитьЯчейкуВКонвейер("Различные", ОбработчикСравнения);
	Возврат ЭтотОбъект;
	
КонецФункции

Функция Обработать(Знач ОписаниеОповещения, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(ОписаниеОповещения) = Тип("Строка") Тогда
		ОписаниеОповещения = СформироватьВременноеОписаниеОповещения(ОписаниеОповещения, ДополнительныеПараметры);
	КонецЕсли;
	
	ПоложитьЯчейкуВКонвейер("Обработать", ОписаниеОповещения);
	Возврат ЭтотОбъект;

КонецФункции

Функция Фильтровать(Знач ОписаниеОповещения, Знач ДополнительныеПараметры = Неопределено) Экспорт
		
	Если ТипЗнч(ОписаниеОповещения) = Тип("Строка") Тогда
		ОписаниеОповещения = СформироватьВременноеОписаниеОповещения(ОписаниеОповещения, ДополнительныеПараметры);
	КонецЕсли;

	ПоложитьЯчейкуВКонвейер("Фильтровать", ОписаниеОповещения);
	Возврат ЭтотОбъект;

КонецФункции

Функция Сортировать(Знач ОбработчикСравнения = Неопределено, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ОбработчикСравнения = Неопределено Тогда
		ОбработчикСравнения = ПроцессорыКоллекций.СтандартныйОбработчикСравнения();
	Иначе
		Если ТипЗнч(ОбработчикСравнения) = Тип("Строка") Тогда
			ОбработчикСравнения = СформироватьВременноеОписаниеОповещения(ОбработчикСравнения, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;

	ПоложитьЯчейкуВКонвейер("Сортировать", ОбработчикСравнения);
	Возврат ЭтотОбъект;
	
КонецФункции

// Терминальные методы

Функция ПолучитьПервый() Экспорт
	Лог.Отладка("ПолучитьПервый");
	
	ПройтиКонвейер();

	Результат = Неопределено;
	Коллекция = ПроцессорКоллекцийСлужебный.ПолучитьКоллекцию();
	Для Каждого Элемент Из Коллекция Цикл
		Результат = Элемент;
		Прервать;
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция ВМассив() Экспорт
	
	Лог.Отладка("ВМассив");

	ПройтиКонвейер();

	Результат = Новый Массив;
	Коллекция = ПроцессорКоллекцийСлужебный.ПолучитьКоллекцию();
	Для Каждого Элемент Из Коллекция Цикл
		Результат.Добавить(Элемент);
	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ВСтроку() Экспорт
	Лог.Отладка("ВСтроку");
	
	ПройтиКонвейер();
	
	Результат = "";
	Коллекция = ПроцессорКоллекцийСлужебный.ПолучитьКоллекцию();
	Для Каждого Элемент Из Коллекция Цикл
		Результат = Результат + Элемент;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция Количество() Экспорт
	
	Лог.Отладка("Количество");
	
	ПройтиКонвейер();
	
	Коллекция = ПроцессорКоллекцийСлужебный.ПолучитьКоллекцию();
	Результат = Коллекция.Количество();
	
	Возврат Результат;

КонецФункции

Функция ДляКаждого(Знач ОписаниеОповещения, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Лог.Отладка("ДляКаждого");

	Если ТипЗнч(ОписаниеОповещения) = Тип("Строка") Тогда
		ОписаниеОповещения = СформироватьВременноеОписаниеОповещения(ОписаниеОповещения, ДополнительныеПараметры);
	КонецЕсли;

	ПройтиКонвейер();
	
	Результат = Новый Массив;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Обработчик", ОписаниеОповещения);
	
	Результат = ПроцессорКоллекцийСлужебный.ВыполнитьОбработать(ДополнительныеПараметры);
	
	ОчиститьВременныеОписанияОповещений();

	Возврат Результат;

КонецФункции

Функция Минимум(Знач ОбработчикСравнения = Неопределено, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Лог.Отладка("Минимум");
	
	Если ОбработчикСравнения = Неопределено Тогда
		ОбработчикСравнения = ПроцессорыКоллекций.СтандартныйОбработчикСравнения();
	Иначе
		Если ТипЗнч(ОбработчикСравнения) = Тип("Строка") Тогда
			ОбработчикСравнения = СформироватьВременноеОписаниеОповещения(ОбработчикСравнения, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;

	ПройтиКонвейер();
	
	Результат = Новый Массив;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Обработчик", ОбработчикСравнения);
	
	ПроцессорКоллекцийСлужебный.ВыполнитьСортировать(Результат, ДополнительныеПараметры);
	
	ОчиститьВременныеОписанияОповещений();

	Если Результат.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Результат[0];
	КонецЕсли;

КонецФункции

Функция Максимум(Знач ОбработчикСравнения = Неопределено, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Лог.Отладка("Максимум");
	
	Если ОбработчикСравнения = Неопределено Тогда
		ОбработчикСравнения = ПроцессорыКоллекций.СтандартныйОбработчикСравнения();
	Иначе
		Если ТипЗнч(ОбработчикСравнения) = Тип("Строка") Тогда
			ОбработчикСравнения = СформироватьВременноеОписаниеОповещения(ОбработчикСравнения, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
	ПройтиКонвейер();
	
	Результат = Новый Массив;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Обработчик", ОбработчикСравнения);
	
	ПроцессорКоллекцийСлужебный.ВыполнитьСортировать(Результат, ДополнительныеПараметры);
	
	ОчиститьВременныеОписанияОповещений();
		
	Если Результат.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Результат[Результат.Количество() - 1];
	КонецЕсли;
	
КонецФункции

Функция Сократить(Знач Обработчик, Знач НачальноеЗначение = Неопределено, Знач ДополнительныеПараметры = Неопределено) Экспорт

	Лог.Отладка("Сократить");
	
	Если ТипЗнч(Обработчик) = Тип("Строка") Тогда
		Обработчик = СформироватьВременноеОписаниеОповещения(Обработчик, ДополнительныеПараметры);
	КонецЕсли;

	ПройтиКонвейер();

	Результат = НачальноеЗначение;
	Коллекция = ПроцессорКоллекцийСлужебный.ПолучитьКоллекцию();
	Для Каждого Элемент Из Коллекция Цикл
		// Если Обработчик.ДополнительныеПараметры = Неопределено Тогда
		// 	Обработчик.ДополнительныеПараметры = Новый Структура;
		// КонецЕсли;
		// Обработчик.ДополнительныеПараметры.Вставить("Элемент", Элемент);
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
		Обработчик.УстановитьПараметры(ДополнительныеПараметры);
		Результат = Делегаты.Исполнить(Обработчик);
	КонецЦикла;

	ОчиститьВременныеОписанияОповещений();
	
	Возврат Результат;

КонецФункции

Функция Получить(ТипРезультата) Экспорт
	
	Лог.Отладка("Получить %1", ТипРезультата);
	
	ПройтиКонвейер();
	
	Коллекция = ПроцессорКоллекцийСлужебный.ПолучитьКоллекцию();
	КэшКолонок = ПроцессорКоллекцийСлужебный.ПолучитьКэшКолонок();
	
	Результат = Новый(ТипРезультата);
	
	РезультатСодержитКолонки = ТипРезультата = Тип("ТаблицаЗначений");
	// Рефлектор = Новый Рефлектор;
	// ТаблицаСвойств = Рефлектор.ПолучитьТаблицуСвойств(Результат);
	// РезультатСодержитКолонки = ТаблицаСвойств.Найти("Колонки", "Имя") <> Неопределено;
		// // Попытка
		// 	Если ТипРезультата = Тип("ТаблицаЗначений") Тогда
		// 		Колонка = Результат[0]["Имя"];
		// 		РезультатСодержитКолонки = Колонка <> Неопределено;
		// 		// РезультатСодержитКолонки = Истина;
		// 	Иначе
		// 		РезультатСодержитКолонки = Ложь;
		// 	КонецЕсли;
		// // Исключение
		// // 	РезультатСодержитКолонки = Ложь;
		// // КонецПопытки;
	Если РезультатСодержитКолонки Тогда
		Для Каждого Колонка Из КэшКолонок Цикл
			Результат.Колонки.Добавить(
				Колонка.Имя);
			// 	Колонка.ТипЗначения,
			// 	Колонка.Заголовок,
			// 	Колонка.Ширина
			// );
		КонецЦикла;
	
		Если Результат.Колонки.Количество() = 0 Тогда
			Результат.Колонки.Добавить("Значение");
		КонецЕсли;
	КонецЕсли;

	ЭлементСодержитКолонки = КэшКолонок.Количество() > 0;
	Лог.Отладка("Результат содержит колонки %1", РезультатСодержитКолонки);
	Лог.Отладка("Элемент содержит колонки %1", ЭлементСодержитКолонки);
	Для Каждого ЭлементКоллекции Из Коллекция Цикл
		Если РезультатСодержитКолонки И ЭлементСодержитКолонки Тогда
			ЗаполнитьЗначенияСвойств(Результат.Добавить(), ЭлементКоллекции);
		ИначеЕсли РезультатСодержитКолонки Тогда
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.Значение = ЭлементКоллекции;
		Иначе
			Результат.Добавить(ЭлементКоллекции);
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ЛюбойСоответствует(Знач ОписаниеОповещения, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Лог.Отладка("ЛюбойСоответствует");
	
	Если ТипЗнч(ОписаниеОповещения) = Тип("Строка") Тогда
		ОписаниеОповещения = СформироватьВременноеОписаниеОповещения(ОписаниеОповещения, ДополнительныеПараметры);
	КонецЕсли;

	ПройтиКонвейер();
	
	Коллекция = ПроцессорКоллекцийСлужебный.ПолучитьКоллекцию();
	Результат = Ложь;

	// Если ОписаниеОповещения.ДополнительныеПараметры = Неопределено Тогда
	// 	ОписаниеОповещения.ДополнительныеПараметры = Новый Структура;
	// КонецЕсли;
	// ОписаниеОповещения.ДополнительныеПараметры.Вставить("Элемент");
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент");
	ОписаниеОповещения.УстановитьПараметры(ДополнительныеПараметры);

	Для Каждого Элемент Из Коллекция Цикл
		ДополнительныеПараметры.Элемент = Элемент;
		РезультатФильтрации = Ложь;
		РезультатФильтрации = Делегаты.Исполнить(ОписаниеОповещения);
		
		Если РезультатФильтрации Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	ОчиститьВременныеОписанияОповещений();
	
	Возврат Результат;

КонецФункции

Функция ВсеСоответствуют(Знач ОписаниеОповещения, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Лог.Отладка("ВсеСоответствуют");
	
	Если ТипЗнч(ОписаниеОповещения) = Тип("Строка") Тогда
		ОписаниеОповещения = СформироватьВременноеОписаниеОповещения(ОписаниеОповещения, ДополнительныеПараметры);
	КонецЕсли;

	ПройтиКонвейер();
	
	Коллекция = ПроцессорКоллекцийСлужебный.ПолучитьКоллекцию();
	Результат = Истина;
	
	// Если ОписаниеОповещения.ДополнительныеПараметры = Неопределено Тогда
	// 	ОписаниеОповещения.ДополнительныеПараметры = Новый Структура;
	// КонецЕсли;
	// ОписаниеОповещения.ДополнительныеПараметры.Вставить("Элемент");
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент");
	ОписаниеОповещения.УстановитьПараметры(ДополнительныеПараметры);
	
	Для Каждого Элемент Из Коллекция Цикл
		ДополнительныеПараметры.Элемент = Элемент;
		РезультатФильтрации = Ложь;
		РезультатФильтрации = Делегаты.Исполнить(ОписаниеОповещения);
		
		Если НЕ РезультатФильтрации Тогда
			Результат = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	ОчиститьВременныеОписанияОповещений();
	
	Возврат Результат;
	
КонецФункции

Функция ВсеНеСоответствуют(Знач ОписаниеОповещения, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Лог.Отладка("ВсеНеСоответствуют");
	
	Если ТипЗнч(ОписаниеОповещения) = Тип("Строка") Тогда
		ОписаниеОповещения = СформироватьВременноеОписаниеОповещения(ОписаниеОповещения, ДополнительныеПараметры);
	КонецЕсли;

	ПройтиКонвейер();
	
	Коллекция = ПроцессорКоллекцийСлужебный.ПолучитьКоллекцию();
	Результат = Истина;
	
	// Если ОписаниеОповещения.ДополнительныеПараметры = Неопределено Тогда
	// 	ОписаниеОповещения.ДополнительныеПараметры = Новый Структура;
	// КонецЕсли;
	// ОписаниеОповещения.ДополнительныеПараметры.Вставить("Элемент");
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент");
	ОписаниеОповещения.УстановитьПараметры(ДополнительныеПараметры);
	
	Для Каждого Элемент Из Коллекция Цикл
		ДополнительныеПараметры.Элемент = Элемент;
		РезультатФильтрации = Ложь;
		РезультатФильтрации = Делегаты.Исполнить(ОписаниеОповещения);
		
		Если РезультатФильтрации Тогда
			Результат = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	ОчиститьВременныеОписанияОповещений();
	
	Возврат Результат;
	
КонецФункции

// Служебные процедуры и функции

Процедура ПоложитьЯчейкуВКонвейер(ИмяОперации, 
								  ВходящееОписаниеОповещения = Неопределено, 
								  ДополнительныеПараметры = Неопределено)
	
	Сообщение = ИмяОперации;
	Лог.Отладка(Сообщение);
	Если ВходящееОписаниеОповещения <> Неопределено Тогда
		Сообщение = Сообщение + " " + ВходящееОписаниеОповещения.ИмяМетода();
	КонецЕсли;
	Лог.Отладка(Сообщение);
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	Если ВходящееОписаниеОповещения <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("Обработчик", ВходящееОписаниеОповещения);
	КонецЕсли;

	Ячейка = Делегаты.Создать(ПроцессорКоллекцийСлужебный, "Выполнить" + ИмяОперации, ДополнительныеПараметры);
	
	Конвейер.Добавить(Ячейка);
	
КонецПроцедуры

Процедура ПройтиКонвейер()

	Лог.Отладка("Прохожу по конвейеру");

	Результат = Новый Массив;
	Для Каждого Ячейка Из Конвейер Цикл
		Коллекция = ПроцессорКоллекцийСлужебный.ПолучитьКоллекцию();
		
		Лог.Отладка("Выполняю ячейку конвейера %1", Ячейка.ИмяМетода());
		Лог.Отладка("Размер коллекции %1", Коллекция.Количество());

		Результат = Делегаты.Исполнить(Ячейка);
		ПроцессорКоллекцийСлужебный.УстановитьКоллекцию(Результат, Ложь);
	КонецЦикла;

	Конвейер.Очистить();

КонецПроцедуры

Функция СформироватьВременноеОписаниеОповещения(ПользовательскоеВыражение, ДополнительныеПараметры)

	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;

	ПутьКФайлуШаблона = ОбъединитьПути(ТекущийСценарий().Каталог, "ШаблонИзолированногоКласса.os");
	ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлуШаблона, КодировкаТекста.UTF8NoBom);	
	ТекстИзолированногоКласса = ЧтениеТекста.Прочитать();

	ТекстИзолированногоКласса = СтрЗаменить(ТекстИзолированногоКласса, "Результат = 0;", ПользовательскоеВыражение);
	
	ВременныйФайл = ЛокальныйМенеджерВременныхФайлов.НовоеИмяФайла("os");
	ЗаписьТекста = Новый ЗаписьТекста(ВременныйФайл);
	ЗаписьТекста.Записать(ТекстИзолированногоКласса);
	ЗаписьТекста.Закрыть();
// Сообщить("ТекстИзолированногоКласса 
// 	|" +ТекстИзолированногоКласса);

	ВременныйСценарий = ЗагрузитьСценарий(ВременныйФайл);

	ОписаниеОповещения = Делегаты.Создать(ВременныйСценарий, 
		"ОбработкаОповещения", 
		ДополнительныеПараметры
	);

	Возврат ОписаниеОповещения;

КонецФункции

Процедура ОчиститьВременныеОписанияОповещений()
	ЛокальныйМенеджерВременныхФайлов.Удалить();
	ВременныеОписанияОповещений = Новый Массив;
КонецПроцедуры

Процедура Инициализация()
	Конвейер = Новый Массив;
	ВременныеОписанияОповещений = Новый Массив;
	ЛокальныйМенеджерВременныхФайлов = Новый МенеджерВременныхФайлов;
	Лог = Логирование.ПолучитьЛог("oscript.lib.stream");
	// Лог.УстановитьУровень(УровниЛога.Отладка);

	ПутьКСценарию_ПроцессорКоллекцийСлужебный = ОбъединитьПути(ТекущийСценарий().Каталог, "ПроцессорКоллекцийСлужебный.os");
	ПроцессорКоллекцийСлужебный = ЗагрузитьСценарий(ПутьКСценарию_ПроцессорКоллекцийСлужебный);
КонецПроцедуры

Инициализация();